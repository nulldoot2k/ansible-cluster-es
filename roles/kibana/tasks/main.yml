---

- name: "[Kibana] - Install Kibana"
  become: true
  apt:
    name:
      - "kibana={{ es_version }}"
    state: present

- name: "[Kibana] - Daemon Reload"
  systemd:
    daemon_reload: yes
  notify:
    - Start "{{ ki_service }}"
    - Enable "{{ ki_service }}"

- name: "[Kibana] - Create folder certs"
  file:
    path: "{{ kibana_certs_dir }}"
    state: directory
    owner: "{{ ki_owner }}"
    group: "{{ ki_groups }}"

- name: "[Kibana] - Copy files from cloned folder kibana-server to destination"
  copy:
    src: "{{ elasticsearch_local }}/kibana-server/"
    dest: "{{ kibana_certs_dir }}"
    
- name: "[Kibana] - Fix directory permission"
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ ki_owner }}"
    group: "{{ ki_groups }}"
    recurse: yes
    mode: u=rwX,g=rX,o-rwx
  loop:
    - "{{ kibana_conf_dir }}"
    - "{{ kibana_certs_dir}}"
    - "{{ kibana_pid_dir}}"
    - "{{ kibana_data_dir }}"
    - "{{ kibana_log_dir }}"

- name: "[Kibana] - Add file kibana.yml"
  tags: add-file-kibana-conf
  template:
    src: kibana.yml.j2
    dest: "{{ kibana_conf_dir }}/kibana.yml"
    owner: "{{ ki_owner }}"
    group: "{{ ki_groups }}"
    mode: 0660

- name: "[Kibana] - Check Status Kibana"
  systemd:
    name: "{{ ki_service }}"
    state: started
  register: kibana_status

- name: "[Kibana] - Restart/start Kibana service"
  systemd:
    name: "{{ ki_service }}"
    state: "{{ 'started' if kibana_status.status == 'running' else 'restarted' }}"

- name: "[Kibana] - Create passwd nginx reverse proxy"
  shell: "sudo htpasswd -b -c {{ nginx_conf_dir }}/.htpasswd.kibana {{ es_username }} {{ es_password }}"

- name: "[Kibana] - Copy file nginx reverse"
  template:
    src: devops.kibana.cloud.j2
    dest: "{{ nginx_avai_dir }}/devops.kibana.cloud"

- name: "[Kibana] - Create symbolic link if not exists"
  become: true
  file:
    src: "{{ nginx_avai_dir }}/devops.kibana.cloud"
    dest: "{{ nginx_enab_dir }}/devops.kibana.cloud"
    state: link
    force: no

- name: "[Kibana] - Iptable drop nginx"
  shell: "sudo iptables -A INPUT -p tcp --dport 80 ! -s 127.0.0.1 -j DROP"

- name: "[Kibana] - Restart service Nginx"
  systemd:
    name: nginx
    state: restarted
  when: elk_auth_ssl == "yes"
    
- name: "[Kibana] - Stopped service Nginx"
  systemd:
    name: nginx
    state: stopped
  when: elk_auth_ssl == "no"
