---

- name: Copy files from cloned folder http to destination
  tags: add-key-elastic
  copy:
    src: "{{ elasticsearch_local }}/http/"
    dest: "{{ elasticsearch_certs_dir }}"

# keystore
 
- name: "Check if secure in keystore exists"
  tags: elastic-keystone
  stat:
    path: "{{ elasticsearch_conf_dir }}/elasticsearch.keystore"
  register: keystore_file

- name: "Remove secure password from keystore {{ item }}"
  become: true
  become_user: "{{ es_owner }}"
  tags: elastic-keystone
  shell: "{{ elasticsearch_bin_dir }}/elasticsearch-keystore remove {{ item }}"
  with_items:
    - "xpack.security.transport.ssl.keystore.secure_password"
    - "xpack.security.transport.ssl.truststore.secure_password"
    - "xpack.security.http.ssl.keystore.secure_password"
  ignore_errors: yes
  when: "keystore_file.stat.exists == true"

- name: "Add secure password to keystore {{ item }}"
  tags: elastic-keystone
  become: true
  become_user: "{{ es_owner }}"
  shell: "echo password | {{ elasticsearch_bin_dir }}/elasticsearch-keystore add -x -f {{ item }}"
  with_items:
    - "xpack.security.transport.ssl.keystore.secure_password"
    - "xpack.security.transport.ssl.truststore.secure_password"
    - "xpack.security.http.ssl.keystore.secure_password"
    - "bootstrap.password"
  ignore_errors: yes

- name: "Add file config elasticsearch.yml"
  tags: add-file-elastic
  template:
    src: "elasticsearch.yml.j2"
    dest: "{{ elasticsearch_conf_dir }}/elasticsearch.yml"
    owner: "{{ es_owner }}"
    group: "{{ es_groups }}"
    mode: '0660'

- name: "Add file config heapsize"
  template:
    src: "jvm.options.j2"
    dest: "{{ elasticsearch_conf_dir }}/jvm.options"
    owner: "{{ es_owner }}"
    group: "{{ es_groups }}"
    mode: '0660'

- name: "Daemon service ES"
  shell: "sudo /bin/systemctl daemon-reload"

- name: "Ensure elasticsearch service is running"
  systemd:
    name: "{{ clustername }}"
    enabled: yes
    state: started
  register: response

- name: "Check elasticsearch service status"
  debug:
    msg: "Elasticsearch service is {{ 'running' if response.changed else 'stopped' }}"
      
- name: "Restart master service {{ clustername }}"
  tags: elastic-master
  systemd:
    name: "{{ clustername }}"
    state: restarted
    daemon_reexec: yes
    daemon_reload: yes
  when: "inventory_hostname in groups['elastic_master']"
    
- name: "Reset passwd elastic"
  shell: 'printf "{{ es_password }}\n{{ es_new_password }}" | {{ elasticsearch_bin_dir }}/elasticsearch-reset-password -b -i -u {{ es_username }}'
  when: "inventory_hostname in groups['elastic_ca']"

- name: "Reset-passwd-kibana"
  shell: 'printf "{{ ki_password }}\n{{ ki_password }}" | {{ elasticsearch_bin_dir }}/elasticsearch-reset-password -b -i -u {{ ki_username }}'
  when: "inventory_hostname in groups['elastic_ca']"

- name: Restart worker
  tags: elastic-worker
  systemd:
    name: "{{ clustername }}"
    state: restarted
    daemon_reexec: yes
    daemon_reload: yes
  when: "inventory_hostname in groups['elastic_data']"
    
- name: "Enable service Elasticsearch"
  service:
    name: "{{ clustername }}"
    enabled: yes
